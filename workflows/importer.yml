# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Import from ParaTranz

on:
  repository_dispatch:
    types: [test_trigger]
    
  workflow_dispatch:
    inputs:
      name:
        description: 'Manual Run'
        required: true
        default: 'Manual Import'

  schedule:
    - cron:  '0 */3 * * *'

jobs:
  generate:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[ci skip]')"

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: python -m pip install --upgrade pip
      - name: Install translate-toolkit
        run: pip install translate-toolkit
      - name: Install regex
        run: pip install regex
      - name: Install janome
        run: pip install janome
      - name: Install natsort
        run: pip install natsort
      - name: Copy sources
        run: sudo sh ./Importer/copy_sources.sh
      - name: Run
        run: python ./Importer/main.py # CSV > HTMLの変換を実行
        env:
          PARATRANZ_SECRET: ${{ secrets.PARATRANZ_SECRET }}
          PARATRANZ_CODE: ${{ secrets.PARATRANZ_CODE }}
      - name: Copy converted
        run: sudo sh ./Importer/copy_converted.sh
      - name: Set Env
        run: |
             echo "$(<_ENV_ACTION_STATE)" >> $GITHUB_ENV
             echo "$(<_ENV_TAG)" >> $GITHUB_ENV
             echo "$(<_ENV_VER)" >> $GITHUB_ENV
             echo "$(<_ENV_GENERATE_EX)" >> $GITHUB_ENV
             echo "$(<_ENV_DISCORD_MESSAGE)" >> $GITHUB_ENV
             ls
             rm -f _ENV_*
      - name: Github Release create, update, and upload assets
        if: ${{ env.action_state == 'green'}}
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.release_tag }}
          name: v${{ env.release_ver }}
          files: >
            ./Release/YoYoStudioRoboHelp.zip
            ./Release/japanese.csv
          draft: false
          gzip: false
          allow_override: true
      - name: (for Alt) Github Release create, update, and upload assets
        if: ${{ env.generate_ex == 'green'}}
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.release_tag }}
          name: v${{ env.release_ver }}
          files: >
            ./Release/YoYoStudioRoboHelp_Alt.zip
            ./Release/japanese_alt.csv
          draft: false
          gzip: false
          allow_override: true
      - name: Write Release Stats
        if: ${{ env.action_state == 'green'}}
        run: python ./Importer/write_release_stats.py
        env:
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Push
        if: ${{ env.action_state == 'green'}}
        run: sudo sh ./Importer/push.sh # 変更があればコミット&プッシュ
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ env.action_state == 'green' && env.DISCORD_WEBHOOK}}
        uses: Ilshidur/action-discord@master # Discordへの更新通知
        with:
          args: '${{ env.discord_message }}'
